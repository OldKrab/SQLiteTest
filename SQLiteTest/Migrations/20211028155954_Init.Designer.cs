// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLiteTest;

namespace SQLiteTest.Migrations
{
    [DbContext(typeof(TestContext))]
    [Migration("20211028155954_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("DiseaseSymptom", b =>
                {
                    b.Property<int>("DiseasesDiseaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SymptomsSymptomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiseasesDiseaseId", "SymptomsSymptomId");

                    b.HasIndex("SymptomsSymptomId");

                    b.ToTable("DiseaseSymptom");
                });

            modelBuilder.Entity("SQLiteTest.Objects.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("DiseaseId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("SQLiteTest.Objects.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("DiseaseSymptom", b =>
                {
                    b.HasOne("SQLiteTest.Objects.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLiteTest.Objects.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsSymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
